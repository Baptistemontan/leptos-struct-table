#![allow(unused_variables)]

#[cfg(feature = "chrono")]
mod chrono;
use crate::{CellValue, RenderOptions};

use core::fmt::Display;
use leptos::*;

/// The default cell renderer. Uses the `<td>` element.
#[component]
pub fn DefaultTableCellRenderer<T, F>(
    /// The class attribute for the cell element. Generated by the classes provider.
    class: String,
    /// The value to display.
    #[prop(into)]
    value: MaybeSignal<T>,
    /// Event handler called when the cell is changed. In this default renderer this will never happen.
    on_change: F,
    /// The index of the column. Starts at 0.
    index: usize,
    options: RenderOptions,
) -> impl IntoView
where
    T: CellValue + Clone + 'static,
    F: Fn(T) + 'static,
{
    view! {
        <td class=class>{value.get().render_value(&options)}</td>
    }
}

/// The default number cell renderer. Uses the `<td>` element.
#[component]
pub fn DefaultNumberTableCellRenderer<T, F>(
    /// The class attribute for the cell element. Generated by the classes provider.
    class: String,
    /// The value to display.
    #[prop(into)]
    value: MaybeSignal<T>,
    /// Event handler called when the cell is changed. In this default renderer this will never happen.
    on_change: F,
    /// The index of the column. Starts at 0.
    index: usize,
    /// The number of digits to display after the decimal point. Provided by the `#[table(format(precision=X))]` attribute of the field.
    #[prop(optional)]
    precision: Option<usize>,
) -> impl IntoView
where
    T: Display + Clone + 'static,
    F: Fn(T) + 'static,
{
    let text = create_memo(move |_| match precision {
        Some(precision) => format!("{:.precision$}", value()),
        None => format!("{}", value()),
    });

    view! {
        <td class=class>{text}</td>
    }
}
