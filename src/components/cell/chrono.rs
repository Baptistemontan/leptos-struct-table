#![allow(unused_variables)]

use chrono::{NaiveDate, NaiveDateTime, NaiveTime};
use leptos::*;
use paste::paste;

macro_rules! date_cell_renderer {
    (
        $(#[$outer:meta])*
        $date_type:ident
    ) => {
        paste! {
            $(#[$outer])*
            #[doc(cfg(feature = "chrono"))]
            #[component]
            pub fn [<Default $date_type TableCellRenderer>] (
                cx: Scope,
                /// The class attribute for the cell element. Generated by the classes provider.
                #[prop(into)] class: MaybeSignal<String>,
                /// The value to display.
                #[prop(into)] value: MaybeSignal<$date_type>,
                /// The index of the column. Starts at 0.
                index: usize,
                /// The format string to use for formatting the date. Provided by the `#[table(format(string="..."))]` attribute of the field.
                /// See [`chrono::format::strftime`] for more information.
                #[prop(optional)] format_string: Option<String>,
            ) -> impl IntoView {
                let text = match format_string {
                    Some(format_string) => create_memo(cx, move |_| value().format(&format_string).to_string()),
                    None => create_memo(cx, move |_| value().to_string()),
                };

                view! { cx,
                    <td class=class>{text}</td>
                }
            }
        }
    };
}

date_cell_renderer!(
    /// The default cell renderer for [`chrono::NaiveDate`].
    NaiveDate
);

date_cell_renderer!(
    /// The default cell renderer for [`chrono::NaiveDateTime`].
    NaiveDateTime
);

date_cell_renderer!(
    /// The default cell renderer for [`chrono::NaiveTime`].
    NaiveTime
);
