use crate::row_renderer::RowRenderer;
use crate::{ChangeEventHandler, TableChangeEvent};
use leptos::*;

/// The default table row renderer. Uses the `<tr>` element. Please note that this
/// is **NOT** a `#[component]`.
#[allow(unused_variables)]
pub fn DefaultTableRowRenderer<Row>(
    // The class attribute for the row element. Generated by the classes provider.
    class: Signal<String>,
    // The row to render.
    row: Row,
    // The index of the row. Starts at 0 for the first body row.
    index: usize,
    // The selected state of the row. True, when the row is selected.
    selected: RwSignal<bool>,
    // Event handler callback for changes
    on_change: ChangeEventHandler<Row>,
) -> impl IntoView
where
    Row: RowRenderer + Clone + 'static,
{
    let key = row.key();

    view! {
        <tr class=class on:click=move |mouse_event| selected.set(true)>
            {row.render_row(index, on_change)}
        </tr>
    }
}

pub fn DefaultRowPlaceholderRenderer(height: Signal<f64>) -> impl IntoView {
    view! { <div style:height=move || format!("{}px", height.get())></div> }
}

pub fn DefaultErrorRowRenderer(err: String) -> impl IntoView {
    view! { <div>{err}</div> }
}

pub fn DefaultLoadingRowRenderer(col_count: usize, inner_class: Signal<String>) -> impl IntoView {
    view! {
        <tr>
            {
                (0..col_count).map(|_| view! {
                    <td>
                        <div class=inner_class></div>
                    </td>
                }).collect_view()
            }
        </tr>
    }
}
